{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Curren Dynamics","text":"<p>Curren Dynamics is a hardware design studio building open-source electronics for makers, engineers, and R/C hobbyists. Our focus is on accessible, high-performance tools that blend prototyping flexibility with real-world durability.</p> <p>We design everything from programmable motor controllers to Arduino-compatible development boards, with an emphasis on customization, clarity, and community collaboration.</p>"},{"location":"#featured-projects","title":"\ud83d\ude80 Featured Projects","text":""},{"location":"#escuino-dual-brushed-motor-esc-built-for-arduino-ide","title":"ESCuino \u2013 Dual Brushed Motor ESC built for Arduino IDE","text":"<p> An open-source, user-programmable motor controller built for R/C vehicles, robotics, and more.</p>"},{"location":"#start-here","title":"\ud83e\uddf0 Start Here","text":"<ul> <li>Overview</li> <li>Hardware Docs</li> <li>Development</li> <li>Community Feedback</li> <li>Contribute</li> </ul>"},{"location":"#mighty-mouse-pro-micro","title":"Mighty Mouse Pro Micro","text":"<p> Drive motors with up to 35V and 32A (depending on thermal limitations) with the Arduino Pro Micro platform!</p>"},{"location":"#start-here_1","title":"\ud83e\uddf0 Start Here","text":"<ul> <li>Overview</li> </ul> <p>Designed in the Ozarks, USA. Built for the Frontier. </p>"},{"location":"ESCuino_X2/","title":"Overview","text":""},{"location":"ESCuino_X2/#escuino-x2-developer-board-v10","title":"ESCuino X2 Developer Board V1.0","text":"<p>The ESCuino is an open-source project by Curren Dynamics, created to empower the maker and R/C hobbyist communities with a flexible, Arduino-compatible dual brushed motor ESC (Electronic Speed Controller). Designed with versatility and customization in mind, ESCuino combines the power of a fully user-programmable microcontroller with robust, high-performance motor drivers\u2014all in one compact board.</p> <p></p> <p>What is ESCuino? At its core, ESCuino is more than just an ESC\u2014it's a development platform. Based on the popular ATmega328P microcontroller and compatible with the Arduino IDE, it allows makers to write custom firmware, integrate sensors, automate control logic, or simply run their R/C vehicles with precise and reliable power delivery.</p> <p>Whether you're prototyping a robotics project, customizing your next R/C boat, or building educational tools, ESCuino gives you the hardware foundation and software freedom to go further.</p>"},{"location":"ESCuino_X2/#key-features","title":"Key Features","text":"<ul> <li>Open Source: Schematics, firmware, and documentation are freely available.</li> <li>Dual Brushed Motor Outputs: Control two independent motors from one board.</li> <li>Arduino IDE Compatible: Code and upload firmware with tools you already know.</li> <li>USB-C Programming &amp; Power: Easy connectivity and modern power support.</li> <li>Telemetry and Sensor Integration: Expand with your own I/O, sensors, and logic.</li> <li>Upgradeable Firmware: Add your own features or update over time.</li> </ul>"},{"location":"ESCuino_X2/#who-is-it-for","title":"Who is it for?","text":"<ul> <li>Makers and electronics hobbyists</li> <li>R/C vehicle enthusiasts (boats, cars, tanks, etc.)</li> <li>Educators and students learning embedded systems</li> <li>Anyone who wants full control over how their ESC behaves</li> </ul>"},{"location":"ESCuino_X2/#get-started","title":"Get Started","text":"<ul> <li>Hardware Documentation</li> <li>Development Notes</li> <li>Community Feedback</li> </ul>"},{"location":"ESCuino_X2/#contribute","title":"Contribute","text":"<p>Have feedback or want to get involved? Join the community or contribute on GitHub.</p> <p>Designed in the Ozarks, USA. Built for the Frontier. </p>"},{"location":"mm_firmware/","title":"Mm firmware","text":""},{"location":"mm_firmware/#the-aim-of-this-page-is-to-provide-the-user-with-the-inputs-the-drv8245-motor-driver-requires-for-functionality-as-well-as-code-for-a-typical-usecase-scenario-that-users-can-then-modify-as-needed-to-fit-their-needs-this-information-may-be-applicable-to-people-using-other-platforms-to-interface-with-drv82xx-series-automotive-grade-brushed-motor-driver-ics","title":"The aim of this page is to provide the user with the inputs the DRV8245 motor driver requires for functionality as well as code for a typical usecase scenario that users can then modify as needed to fit their needs. This information may be applicable to people using other platforms to interface with DRV82xx series automotive grade brushed motor driver IC's.","text":"<p>To start, we should understand the I/O of the chip we're working with. The DRV8245 is designed for automotive and industrial applications and as such has more features and associated I/O than the typical motor drivers used in R/C ESC's. The Mighty Mouse project uses the HW variant of the driver in the HTSSOP package and its pinout is as follows:</p> Pin # Pin Name Function 1 SR Adjusts Slew Rate of output based on 1 of 6 specified resistance levels 2 DIAG Configure LATCH/RETRY settings for fault detection 3 PH/IN2 Control direction of motor output in PH/EN mode with HIGH/LOW state 4 EN/IN1 Control speed of motor output in PH/EN mode with PWM Duty Cycle 5 DRVOFF Disable motor output based on HIGH/LOW state 24 nSLEEP Place the driver in low-power sleep mode based on HIGH/LOW state 25 iPROPI Current sense output 26 nFAULT Fault indication output to controller 27 MODE Configures control scheme based on 1 of 3 specified resistance levels 28 ITRIP Configuration input for high-side current limiting based on 1 of 6 specified resistance levels <p>This table leaves out the main voltage input, ground, and load outputs as they are statically configured. </p>"},{"location":"mm_overview/","title":"Overview","text":"<p>The Mighty Mouse project aims to provide a small, programmable and affordable ESC shield for the Arduino Pro Micro platform.</p> <p></p>"},{"location":"mm_overview/#our-primary-goals-for-the-board","title":"Our primary goals for the board:","text":"<ul> <li>Roughly the same size and shape as Arduino Pro Micro</li> <li>XT30 connector for battery input</li> <li>Voltage regulation circuit to feed the Pro Micro and radio reciever</li> <li>Three pin header with standard servo |+|-|S| configuration</li> <li>DRV8245 motor driver with solder pads to connect to a brushed motor </li> </ul>"},{"location":"mm_overview/#our-secondary-goals-for-the-board","title":"Our secondary goals for the board:","text":"<ul> <li>DRV8245 should be able to provide the Pro Micro with current sensing</li> <li>The servo signal should support being programmed as an F.Port channel for serial communication with the radio reciever enabling multiple channel inputs and telemetry feedback from the Arduino </li> <li>Package size of 37mm x 18mm </li> </ul> <p>This project is currently in the prototyping and testing stage. Currently awaiting delivery of the Mighty Mouse development board V1.0.2 which we will use for testing various settings and configurations that are typically hardware configured on the DRV8245, as well as firmware for the Arduino Pro Micro. Once the functionality we desire from the DRV8245 has been accomplished with the Dev 1.0.2, then we will finalize trace routing and begin manufacture of the first protoypes of the Mighty Mouse Pro Mico.</p>  Mighty Mouse Dev Board V1.0.2  <p>&lt;img src=\"/assets/images/mm/mm_dev_v102_front_white.png\" class=\"render-smooth\" alt=\"3D Render of Mighty Mouse Dev 1.0.2&gt;</p>"},{"location":"projects/","title":"Current Projects","text":"<p>ESCuino X2 is Curren Dynamics first printed circuit board project. It aims to be the best opensource 2-in-1 ESC incorporating architecture similar to the Arduino R3 Uno. Check out our updates on the progress page, or learn about it's hardware specifications!</p>"},{"location":"projects/#current-projects_1","title":"Current Projects","text":"<p>ESCuino X2 Development Board</p>"},{"location":"x2_development/","title":"Development","text":""},{"location":"x2_development/#intro","title":"Intro","text":"<p>When setting out to design the ESCuino X2, I wanted to create a 2-in-1 ESC that provided a few extra features for use in some of my 3d printable R/C vehicle designs. It is not strictly an ESC- definitely not a flight controller, but something in between. My main goals for this project were as follows;</p> <p>Primary Features</p> <ul> <li>2-in-1 ESC with independent bi-directional control of 2 brushed motors</li> <li>Controllable with a minimum of 2 PWM inputs from a radio receiver</li> <li>2s - 3s voltage and 30a - 60a per motor</li> <li>Programmable via Arduino IDE over USB-C</li> <li>Extra I/O accessible for expandability</li> <li>Sale price under $40</li> </ul> <p>Secondary Features</p> <ul> <li>Waterproof</li> <li>Current sensing at the MCU level</li> <li>Temperature sensing at the MCU level</li> <li>Serial / CAN output for radio telemetry</li> <li>Serial / CAN control input</li> </ul>"},{"location":"x2_development/#getting-started","title":"Getting Started","text":"<p>I think starting from 0 is always the most challenging part. Deciding on what components to use took around a week of reading through countless datasheets and comparing specifications and requirements before I settled on how to drive the motors. I ended up settling on the Texas Instruments DRV8263-Q1, a new IC from TI that incorporates a full H-bridge, current sensing, temperature sensing circuitry, and impressive specifications for the package size. The data sheet boasts an input voltage range of 4.5V - 65V and up to 29A continuous current. Of course, capitalizing on this would require ample thermal dissipation. I had yet to learn just how much thermal dissipation that would require, and what would actually be possible - more on that later. For now though I thought these little ICs were just too cool to not to use them.</p> <p>After I'd decided on how to drive the motors, I started trying to decide on the MCU for the project. I considered several options, including SiLabs Busy Bee series and even a few STM32 models, which have libraries for support in the Arduino IDE. However, using them in this method wouldn't be as feature-rich as their native development platforms. Ultimately, I decided that coding it with the Arduino IDE should mean that it is more than just compatible; it should also be familiar to users with Arduino experience. With that in mind, I decided on the ATmega328P, a processor more than powerful enough for the brushed motors I planned on driving and the features I want to implement. This is also when I decided on creating the board first as a development platform with IO breakout headers that with the saming naming scheme as the UNO R3 -- building the board this way means we should be able to flash the board with an UNO R3 bootloader and essentially treat it the same way we would a standard UNO R3, just with a bit more power. </p> <p>After that, it was just a matter of picking a voltage regulator that wouldn't severely bottleneck the input range supported by the motor drivers, a good USB to serial interface, and it's off to the races. By races, I mean another week of drawing up schematics and trace routing. It was somewhere around the time I was finishing trace routing that I realized Chat-GPT could perform a half-decent design review! This helped catch a few little things I had missed, like ESD protection on the USB data lines and voltage regulator input. It's not a perfect system for design review, but it's better than nothing! </p>"},{"location":"x2_development/#starting-over","title":"Starting Over","text":"<p>Finally, it was time to get some PCB manufacturing and assembly quotes and determine if those ChatGPT design reviews were right about this thing working. I thought we were just going to upload some files, click pay, and have a board 7 days later, like all those YouTube ads suggested, but this is where things started getting frustrating. You might have read through my list of primary features above and thought, \"Huh, 30-60A per motor is quite a bit more than the 6.5A max RMS listed on the hardware page\", and you'd be right. Turns out I had a lot to learn about designing for manufacturing capabilities and parts availability. The DRV8263 I had specified in my designs was too new to be in stock with any major parts distributors; at best, I could find a development board from TI with the chip soldered to it for $180. So I started looking for suitable replacements and found the DRV8245! This chip was a pin-for-pin replacement with similar specs on the datasheet! It supports a lower Vin range of 4.5V to 35V but a peak current of 32A! This was the best suitable replacement I could find, and I replaced all references to the 8263 in my schematics and BOM with the readily available 8245 variant. I still had a bit to learn, however. While doing a bit more late-night research, I found a forum post on e2e.ti.com where a user was asking about the current capabilities of this chip. A TI engineer referred to a thermal dissipation calculator tool they supplied for the chip that calculated predicted temperatures based on a few assumptions about your PCB design. These seem to indicate a temperature of 135 \u00b0C after about 10 seconds at 8A, and that 6.5A would be a safer sustained current level. The assumptions the calculator is based on aren't 100% accurate to my design, though, and TI states the output skew towards the pessimistic side. Still, it wasn't anywhere near my primary feature parameters. </p> <p>Rather than scrap everything I had, I decided to accept a lower potential max current, get the thing built, and shoot for higher outputs in later iterations. Of course, a 30-60A continuous current per motor would be possible using a traditional external FET H-Bridge per motor. Still, the required space would mean a complete clean-sheet redesign, and either a much larger form factor or dual-sided component assembly -- neither of which appealed to me. In reality, to drive the 380 motors, I plan to use this: 6.5A will likely be plenty; it just won't provide the overhead for dual 540 motor control in a bigger project I'm working on, or sound as impressive on paper. All that being said, there is still some hope for this platform! The 6.5A prediction is based on a two-layer PCB and no additional component cooling. It IS possible for the internal circuitry of these boards to handle 32A with perfect thermal dissipation. While \"perfect\" likely isn't possible, this board is a 4-layer PCB with large copper pours to dissipate heat. With additional thermal modifiers like heatsinks or active cooling, we could see significantly higher continuous current capabilities than the 6.5A predictions from TI. Once the board is in hand, I plan to do a significant amount of testing to determine more accurate expectations for the board's current handling capabilities.</p>"},{"location":"x2_development/#pre-production-revisions","title":"Pre-production revisions","text":"<p>If you watch any maker-oriented YouTube videos, you've probably seen the ads for PCBway and JLCPCB that tell you how you could have your PCBs made in just a few days, starting at $2! That was sort of what I had in the back of my mind going into this - can you tell I'm new to this? It turns out those prices are for the simplest 2-layer boards you could dream of, which certainly doesn't include assembly. You could very plausibly create a few breakout boards for SMD components, or various hats or shields for Arduinos, assemble them yourself, and see prices very close to that advertised price point. However, that simply didn't turn out to be the case for this design.</p> <p>When you switch from a 2-Layer PCB to a 4-Layer PCB, right off the bat the price jumps from $2 - $7, then when you switch from the standard 1-oz outer copper layers to 2oz copper, the price jumps up again to about $25, then when you switch from 1/2-oz internal copper layers to 2oz internal copper layers, it jumps again to $70. Unfortunately, the thickness of our copper layers is an essential variable in calculating the thermal dissipation capabilities of our board and the throughput potential for the components attached to it. Still, $70 to get five boards made isn't terrible. Adding assembly and the price of components is a bit of a hit, but some of the components on this board simply aren't cheap, and I knew that when I designed it. After adding the price of components and assembly, getting five boards manufactured would cost about $200- that was until shipping and tariffs were added. The cheapest shipping option from JLCPCB was $60, and since they don't have any US-based fulfillment facilities, tariffs will be applied to my order, bringing the total cost of 5 PCBs to a little under $400. Around $80 per board, all of which I imagined would be fried during stress testing experiments I had planned for them. Of course, the price per board comes down dramatically when they're ordered in larger quantities, and going up to an order size of even just 30 boards will allow me to sell them at the targeted price point. However, if I'm going to spend that much on the first order, I decided I'd better thoroughly review the choices I had made during trace-routing and ensure I wasn't overlooking something simple.</p> <p>Initially, for what I had labeled Dev V1.0, the renders currently on the website, I had planned to use short and wide traces with a high density of vias-in-pad to transfer the current and thermal loads of the motor driver to the underlying copper pours. I wasn't sure this would be the most efficient way of transferring either, and via-in-pad adds a bit of cost to manufacturing. I'd also learned more about the design software I was using and best practices since drawing it up, and decided to re-do it with some more significant copper-pours on the top layer, and add a few more vias for thermal and current transfer. So far, that's been the most important revision to what I'm now calling Dev V1.0.1, based on the following versioning scheme;</p> V 1 0 1 Version Main Architecture Version Production Revisions Pre-Production Revisions <p>And for now, that's where we're at. I'm still trying to give Dev V1.0 every chance at succeeding on the first batch, poring over trace width current capacity calculations and researching everything I can think of to catch things I may have missed. DRC checks are good, Chat GPT says it will work, but I just want to be sure. I plan to order the first batch by the second week of August 2025, so I have about 3 weeks. I'll continue to update this page as I catch more of my mistakes. Thanks for reading!</p> <p>Designed in the Ozarks, Built for the Frontier.</p>"},{"location":"x2_feedback/","title":"X2 feedback","text":""},{"location":"x2_feedback/#community-feedback","title":"Community Feedback","text":""},{"location":"x2_feedback/#this-is-a-compilation-of-community-suggestion-and-our-planned-responses-this-list-will-be-added-to-as-we-continue-to-recieve-brilliant-suggestions-from-the-arduino-and-remote-controlled-communities","title":"This is a compilation of community suggestion and our planned responses. This list will be added to as we continue to recieve brilliant suggestions from the Arduino and Remote Controlled communities.","text":"<ul> <li>Suggestion: Adding mounting holes in the same layout as the UNO R3<ul> <li>We are currently reviewing the component layout and trace routing to determine if this can be accomplished without a major re-design. If possible this will be added to the first production version of the development board. </li> </ul> </li> <li>Suggestion: Shield compatibility with UNO R3<ul> <li>Likely not possible without a considerable redesign for V1.0, however this will be added as a primary design parameter for V2.0</li> </ul> </li> <li>Suggestion: Adding I2C along with a quiic connector<ul> <li>This will certainly be a primary design parameter for V2.0, and potentially even added to the smaller non-dev version of the ESCuino. The ability to add multiple sensors and additional peripherals without the need for exposing a large number of IO would be a brilliant addition, and we are particularly excited about the possibilities this might open up once implemented.</li> </ul> </li> </ul> <p>We love hearing from the community about the applications and use cases they have in mind for this project! Do you have ideas for potential applications or feature suggestions? reach out to us on Facebook! </p> <p>Designed in the Ozarks, USA. Built for the Frontier. </p>"},{"location":"x2_hardware/","title":"ESCuino-X2 Hardware Overview","text":"<p>ESCuino-X2 is a compact, dual brushed motor controller with an integrated ATmega328P microcontroller. Designed to be both Arduino-compatible and rugged enough for high-current applications, this board brings together essential embedded features for robotics, R/C vehicles, and DIY electronics.</p>"},{"location":"x2_hardware/#microcontroller","title":"Microcontroller","text":""},{"location":"x2_hardware/#atmega328p-pn","title":"ATmega328P-PN","text":"<ul> <li>8-bit AVR MCU running at 16 MHz</li> <li>32 KB Flash / 2 KB SRAM / 1 KB EEPROM</li> <li>Arduino Uno R3 pinout and bootloader compatible</li> <li>Operates at 5V, with AVCC decoupled and filtered</li> <li>Exposes UART, SPI, I\u00b2C, PWM, and ADC pins on 0.1\" headers</li> </ul>"},{"location":"x2_hardware/#motor-drivers","title":"Motor Drivers","text":""},{"location":"x2_hardware/#drv8245hqpwprq1-2","title":"DRV8245HQPWPRQ1 \u00d72","text":"<p>Two independent H-bridge motor drivers (one per motor):</p> <ul> <li>Supply voltage (VM): 4.5V \u2013 37V</li> <li>Max continuous output current: 6.5A RMS</li> <li>Peak output current: up to 10\u201314A (depending on cooling and duty cycle)</li> <li>Integrated power FETs (no external FETs needed)</li> <li>Control: PH/EN or PWM/PWM modes</li> <li>Current sensing via IPROPI pin (proportional to output current)</li> <li>Built-in protections: overcurrent, undervoltage, thermal shutdown, short-circuit</li> </ul> <p>Note: Each motor channel can safely sustain ~6.5A continuous with proper PCB heat dissipation. Higher peak currents are possible for brief durations.</p>"},{"location":"x2_hardware/#power-regulation","title":"Power Regulation","text":""},{"location":"x2_hardware/#max17502fatbt","title":"MAX17502FATB+T","text":"<ul> <li>High-efficiency, synchronous step-down converter</li> <li>Input range: 4.5V to 60V</li> <li>Output: 5V regulated (used to power MCU and logic)</li> <li>Internal compensation and soft-start</li> <li>Integrated MOSFET, 500kHz switching frequency</li> </ul> <p>Use case: Powers logic and USB devices from battery voltage.</p>"},{"location":"x2_hardware/#usb-uart-interface","title":"USB-UART Interface","text":""},{"location":"x2_hardware/#cp2102-gmr","title":"CP2102-GMR","text":"<ul> <li>USB to UART bridge</li> <li>Full-speed USB 2.0</li> <li>Supports onboard serial flashing of the ATmega328P</li> <li>Works with Arduino IDE via standard USB CDC drivers</li> </ul> <p>Connector: USB-C (HYCW445-USBC16-730B)</p>"},{"location":"x2_hardware/#power-connectors","title":"Power &amp; Connectors","text":"<ul> <li>Power input range (VIN): 4.5V \u2013 35V</li> <li>Input capacitors: 390\u03bcF bulk + 100nF ceramic decoupling</li> <li>Connectors: </li> <li>4.5V - 35V DC input via solder pads  </li> <li>Motor A and Motor B outputs via solder pads  </li> <li>USB-C for logic power and UART (cannot drive motors on USB-C Power)</li> </ul>"},{"location":"x2_hardware/#indicators","title":"Indicators","text":"<ul> <li>Power LED (Green)</li> <li>TX/RX LEDs (White) for USB serial activity</li> </ul>"},{"location":"x2_hardware/#gpio-expansion","title":"GPIO &amp; Expansion","text":"<p>Exposed I/O on 2.54mm headers:</p> Header Function P1 Digital I/O (D2\u2013D9) P2 Analog I/O (A0\u2013A5) + UART P3 SPI, I\u00b2C, reset, and power lines H4 Motor control pins (PH, EN, DRVOFF, IPROPI, NSLEEP) per driver"},{"location":"x2_hardware/#protections","title":"Protections","text":"<ul> <li>TVS Diode (D3): SMAJ36A for transient voltage suppression on VIN</li> <li>Input filtering: Several MLCCs and RC snubbers</li> <li>USB ESD protection: TPD2EUSB30ADRTR for DP/DM lines</li> </ul>"},{"location":"x2_hardware/#clock-signal","title":"Clock Signal","text":"<ul> <li>X1: 16 MHz crystal for ATmega328P with 22pF load capacitors</li> </ul>"},{"location":"x2_hardware/#core-components-summary","title":"Core Components Summary","text":"Part Function ATmega328P-PN MCU DRV8245HQPWPRQ1 Motor Drivers MAX17502FATB+T 5V Buck Regulator CP2102-GMR USB-UART Bridge <p>Designed in the Ozarks, USA. Built for the Frontier. </p>"}]}